{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { finalize, catchError } from 'rxjs/operators';\nimport { EMPTY } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/todo.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\n\nfunction TodoFormComponent_div_10_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Title is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TodoFormComponent_div_10_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Title is too long\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TodoFormComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtemplate(1, TodoFormComponent_div_10_small_1_Template, 2, 0, \"small\", 18);\n    i0.ɵɵtemplate(2, TodoFormComponent_div_10_small_2_Template, 2, 0, \"small\", 18);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.todoForm.get(\"title\")) == null ? null : tmp_0_0.errors == null ? null : tmp_0_0.errors[\"required\"]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r0.todoForm.get(\"title\")) == null ? null : tmp_1_0.errors == null ? null : tmp_1_0.errors[\"maxlength\"]);\n  }\n}\n\nexport let TodoFormComponent = /*#__PURE__*/(() => {\n  class TodoFormComponent {\n    constructor(todoService, fb, router) {\n      this.todoService = todoService;\n      this.fb = fb;\n      this.router = router; // Collection of todos\n\n      this.todos = []; // Track edit state\n\n      this.editMode = false;\n      this.editIndex = -1; // Pagination and sorting properties\n\n      this.nextPage = 1;\n      this.sortOrder = 'asc';\n      this.sortField = 'ID';\n      this.showNext = false;\n      this.showPrev = false; // Track loading state for UI feedback\n\n      this.loading = false; // Initialize the form with validators\n\n      this.todoForm = this.fb.group({\n        id: [null],\n        title: ['', [Validators.required, Validators.maxLength(100)]],\n        description: [''],\n        completed: [false]\n      });\n    }\n\n    ngOnInit() {\n      // Load todos when component initializes\n      this.todoService.todo$.subscribe(todo => {\n        if (todo !== null) {\n          this.editTodo(todo);\n        }\n      });\n    } // Navigation methods\n\n\n    toggleNextPage() {\n      this.nextPage++;\n      this.loadTodos();\n      this.resetForm();\n    }\n\n    togglePrevPage() {\n      if (this.nextPage > 1) {\n        this.nextPage--;\n        this.loadTodos();\n        this.resetForm();\n      }\n    } // Sorting methods\n\n\n    toggleSortField(newValue) {\n      if (this.sortField === newValue) {\n        this.toggleSortOrder();\n      } else {\n        this.sortOrder = 'asc';\n      }\n\n      this.sortField = newValue;\n      this.loadTodos();\n      this.resetForm();\n    }\n\n    toggleSortOrder() {\n      this.sortOrder = this.sortOrder === 'asc' ? 'desc' : 'asc';\n    } // Load all todos using RxJS operators for better error handling\n\n\n    loadTodos() {\n      this.loading = true;\n      this.todoService.getTodos(this.sortField, this.sortOrder, this.nextPage).pipe(finalize(() => this.loading = false), catchError(error => {\n        console.error('Error loading todos:', error);\n        alert('Failed to load todos. Check console for details.');\n        return EMPTY;\n      })).subscribe(data => {\n        this.todos = data;\n        this.showNext = this.todos.length > 9;\n        this.showPrev = this.nextPage > 1;\n      });\n    } // Create a new todo with improved error handling\n\n\n    createTodo() {\n      if (this.todoForm.invalid) {\n        // Mark fields as touched to trigger validation messages\n        Object.keys(this.todoForm.controls).forEach(key => {\n          const control = this.todoForm.get(key);\n          control === null || control === void 0 ? void 0 : control.markAsTouched();\n        });\n        return;\n      }\n\n      const newTodo = this.todoForm.value;\n      this.loading = true;\n      this.todoService.createTodo(newTodo).pipe(finalize(() => this.loading = false), catchError(error => {\n        console.error('Error creating todo:', error);\n        alert('Failed to create todo. Check console for details.');\n        return EMPTY;\n      })).subscribe(createdTodo => {\n        console.log('Todo created:', createdTodo);\n        this.resetForm();\n        this.router.navigate(['/todos']);\n      });\n    } // Update an existing todo with improved error handling\n\n\n    updateTodo() {\n      if (this.todoForm.invalid) {\n        // Mark fields as touched to trigger validation messages\n        Object.keys(this.todoForm.controls).forEach(key => {\n          const control = this.todoForm.get(key);\n          control === null || control === void 0 ? void 0 : control.markAsTouched();\n        });\n        return;\n      }\n\n      const todoToUpdate = this.todoForm.value;\n      this.loading = true;\n      this.todoService.updateTodo(todoToUpdate).pipe(finalize(() => this.loading = false), catchError(error => {\n        console.error('Error updating todo:', error);\n        alert('Failed to update todo. Check console for details.');\n        return EMPTY;\n      })).subscribe(updatedTodo => {\n        this.resetForm();\n        this.editMode = false;\n        this.todoService.clearTodo();\n        this.router.navigate(['/todos']);\n      });\n    } // Delete a todo with improved error handling\n\n\n    deleteTodo(id, index) {\n      if (confirm('Are you sure you want to delete this todo?')) {\n        this.loading = true;\n        this.todoService.deleteTodo(id).pipe(finalize(() => this.loading = false), catchError(error => {\n          console.error('Error deleting todo:', error);\n          alert('Failed to delete todo. Check console for details.');\n          return EMPTY;\n        })).subscribe(() => {\n          this.todos.splice(index, 1);\n        });\n      }\n    } // Toggle todo status with optimistic updates and rollback on error\n\n\n    toggleStatus(todo) {\n      const originalStatus = todo.completed;\n      todo.completed = !todo.completed;\n      this.todoService.toggleTodoStatus(todo.id).pipe(catchError(error => {\n        console.error('Error toggling todo status:', error);\n        alert('Failed to update todo status. Check console for details.'); // Rollback optimistic update\n\n        todo.completed = originalStatus;\n        return EMPTY;\n      })).subscribe(updatedTodo => {\n        // Update the todo with the response data\n        Object.assign(todo, updatedTodo);\n      });\n    } // Edit a todo - load it into the form\n\n\n    editTodo(todo) {\n      this.todoForm.setValue({\n        id: todo.id,\n        title: todo.title,\n        description: todo.description || '',\n        completed: todo.completed\n      });\n      this.editMode = true; // Create a deep copy to avoid modifying the original until save\n      //this.editIndex = todo.id;\n    } // Cancel editing\n\n\n    cancelEdit() {\n      this.resetForm();\n      this.editMode = false;\n      this.todoService.clearTodo();\n      this.router.navigate(['/todos']);\n    } // Reset the form and edit state\n\n\n    resetForm() {\n      this.todoForm.reset({\n        id: null,\n        title: '',\n        description: '',\n        completed: false\n      });\n      this.editMode = false;\n      this.editIndex = -1;\n    } // Save a todo (create or update)\n\n\n    saveTodo() {\n      if (this.editMode) {\n        this.updateTodo();\n      } else {\n        this.createTodo();\n      }\n    } // Helper method to check if a form control is invalid and touched\n\n\n    isInvalidAndTouched(controlName) {\n      const control = this.todoForm.get(controlName);\n      return control ? control.invalid && control.touched : false;\n    }\n\n  }\n\n  TodoFormComponent.ɵfac = function TodoFormComponent_Factory(t) {\n    return new (t || TodoFormComponent)(i0.ɵɵdirectiveInject(i1.TodoService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  TodoFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TodoFormComponent,\n    selectors: [[\"app-todo-form\"]],\n    decls: 25,\n    vars: 5,\n    consts: [[1, \"row\"], [1, \"container-blue\", \"todo-form-container\", \"col-md-6\", \"mx-auto\"], [1, \"title-blue\"], [1, \"text-center\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"title\"], [\"type\", \"text\", \"id\", \"title\", \"formControlName\", \"title\", \"required\", \"\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"description\"], [\"id\", \"description\", \"formControlName\", \"description\", \"rows\", \"3\", 1, \"form-control\"], [1, \"form-check\", \"mb-3\"], [\"type\", \"checkbox\", \"id\", \"completed\", \"formControlName\", \"completed\", 1, \"form-check-input\"], [\"for\", \"completed\", 1, \"form-check-label\"], [1, \"form-actions\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", \"ms-2\", 3, \"click\"], [1, \"text-danger\"], [4, \"ngIf\"]],\n    template: function TodoFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"h3\", 3);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"form\", 4);\n        i0.ɵɵlistener(\"ngSubmit\", function TodoFormComponent_Template_form_ngSubmit_5_listener() {\n          return ctx.saveTodo();\n        });\n        i0.ɵɵelementStart(6, \"div\", 5);\n        i0.ɵɵelementStart(7, \"label\", 6);\n        i0.ɵɵtext(8, \"Title\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 7);\n        i0.ɵɵtemplate(10, TodoFormComponent_div_10_Template, 3, 2, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 5);\n        i0.ɵɵelementStart(12, \"label\", 9);\n        i0.ɵɵtext(13, \"Description\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"textarea\", 10);\n        i0.ɵɵtext(15, \"        \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 11);\n        i0.ɵɵelement(17, \"input\", 12);\n        i0.ɵɵelementStart(18, \"label\", 13);\n        i0.ɵɵtext(19, \"Completed\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"div\", 14);\n        i0.ɵɵelementStart(21, \"button\", 15);\n        i0.ɵɵtext(22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"button\", 16);\n        i0.ɵɵlistener(\"click\", function TodoFormComponent_Template_button_click_23_listener() {\n          return ctx.cancelEdit();\n        });\n        i0.ɵɵtext(24, \" Cancel \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        let tmp_2_0;\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.editMode ? \"Edit Todo\" : \"Create Todo\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.todoForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.todoForm.get(\"title\")) == null ? null : tmp_2_0.invalid) && (((tmp_2_0 = ctx.todoForm.get(\"title\")) == null ? null : tmp_2_0.dirty) || ((tmp_2_0 = ctx.todoForm.get(\"title\")) == null ? null : tmp_2_0.touched)));\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"disabled\", ctx.todoForm.invalid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.editMode ? \"Update\" : \"Create\", \" \");\n      }\n    },\n    directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i2.RequiredValidator, i4.NgIf, i2.CheckboxControlValueAccessor],\n    styles: [\".todo-form[_ngcontent-%COMP%]{margin-bottom:20px;padding:15px;border-radius:4px;background-color:#f8f9fa;border:1px solid #ddd}.form-group[_ngcontent-%COMP%]{margin-bottom:15px}.form-control[_ngcontent-%COMP%]{width:100%;padding:8px 12px;border:1px solid #ced4da;border-radius:4px;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}.form-control[_ngcontent-%COMP%]:focus{border-color:#80bdff;outline:0;box-shadow:0 0 0 .2rem #007bff40}label[_ngcontent-%COMP%]{font-weight:500;margin-bottom:5px;display:block}textarea.form-control[_ngcontent-%COMP%]{min-height:100px;resize:vertical}.button-group[_ngcontent-%COMP%]{display:flex;grid-gap:10px;gap:10px;margin-top:15px}button[_ngcontent-%COMP%]{padding:8px 16px;border-radius:4px;cursor:pointer;font-weight:500;border:1px solid transparent}button.btn-primary[_ngcontent-%COMP%]{background-color:#007bff;color:#fff}button.btn-primary[_ngcontent-%COMP%]:hover{background-color:#0069d9}button.btn-primary[_ngcontent-%COMP%]:disabled{background-color:#6c757d;cursor:not-allowed}button.btn-secondary[_ngcontent-%COMP%]{background-color:#6c757d;color:#fff}button.btn-secondary[_ngcontent-%COMP%]:hover{background-color:#5a6268}button.btn-danger[_ngcontent-%COMP%]{background-color:#dc3545;color:#fff}button.btn-danger[_ngcontent-%COMP%]:hover{background-color:#c82333}.form-check[_ngcontent-%COMP%]{display:flex;align-items:center;margin-bottom:15px}.form-check[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]{margin-right:8px}.error-message[_ngcontent-%COMP%]{color:#dc3545;font-size:.875rem;margin-top:5px}.edit-mode-indicator[_ngcontent-%COMP%]{background-color:#fff3cd;padding:8px;border-radius:4px;margin-bottom:15px;border-left:4px solid #ffc107}.container-blue[_ngcontent-%COMP%]{border:solid 2px #337ab7;border-radius:5px;padding:1%;margin-top:2%}.title-blue[_ngcontent-%COMP%]{background-color:#337ab7;color:#fff}\"]\n  });\n  return TodoFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}