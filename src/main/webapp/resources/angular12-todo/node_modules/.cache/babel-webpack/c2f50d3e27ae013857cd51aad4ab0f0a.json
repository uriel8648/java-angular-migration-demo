{"ast":null,"code":"import { Observable, throwError, BehaviorSubject } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let TodoService = /*#__PURE__*/(() => {\n  class TodoService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:8080/todo/';\n      this.todoSource = new BehaviorSubject(null);\n      this.todo$ = this.todoSource.asObservable();\n    }\n\n    setTodo(todo) {\n      this.todoSource.next(todo);\n    }\n\n    clearTodo() {\n      this.todoSource.next(null);\n    }\n\n    getTodos(sortField = 'ID', sortOrder = 'asc', page = 1) {\n      return this.http.get(`${this.apiUrl}/sort/${sortField}/${sortOrder}/${page}`).pipe(catchError(this.handleError));\n    }\n\n    getById(id) {\n      return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n    }\n\n    createTodo(todo) {\n      return this.http.post(this.apiUrl, todo).pipe(catchError(this.handleError));\n    }\n\n    updateTodo(todo) {\n      return this.http.put(`${this.apiUrl}/${todo.id}`, todo).pipe(catchError(this.handleError));\n    }\n\n    deleteTodo(id) {\n      return this.http.delete(`${this.apiUrl}/${id}`).pipe(catchError(this.handleError));\n    }\n\n    toggleTodoStatus(id) {\n      return this.http.put(`${this.apiUrl}/${id}/toggle`, {}).pipe(catchError(this.handleError));\n    }\n\n    completeTodos(ids) {\n      return this.http.post(`${this.apiUrl}/bulk/complete`, ids).pipe(catchError(this.handleError));\n    }\n\n    deleteTodos(ids) {\n      return this.http.post(`${this.apiUrl}/bulk/delete`, ids).pipe(catchError(this.handleError));\n    }\n\n    handleError(error) {\n      let errorMessage = 'An unknown error occurred';\n\n      if (error.status === 200 && error.ok === false) {\n        console.warn('API Warning: Received HttpErrorResponse with status 200 but ok false. Treating as success.');\n        return new Observable(observer => {\n          observer.complete();\n        });\n      }\n\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n        console.error('API Error:', error);\n      }\n\n      return throwError(() => new Error(errorMessage));\n    }\n\n  }\n\n  TodoService.ɵfac = function TodoService_Factory(t) {\n    return new (t || TodoService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  TodoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TodoService,\n    factory: TodoService.ɵfac,\n    providedIn: 'root'\n  });\n  return TodoService;\n})();","map":null,"metadata":{},"sourceType":"module"}