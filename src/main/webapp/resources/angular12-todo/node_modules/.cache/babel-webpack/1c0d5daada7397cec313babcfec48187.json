{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\n\nfunction TodoComponent_button_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function TodoComponent_button_8_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.cancelEdit();\n    });\n    i0.ɵɵtext(1, \"Cancel\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TodoComponent_li_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function TodoComponent_li_10_Template_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const todo_r4 = restoredCtx.$implicit;\n      const i_r5 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.editTodo(todo_r4, i_r5);\n    });\n    i0.ɵɵtext(4, \"Edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function TodoComponent_li_10_Template_button_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const todo_r4 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.toggleStatus(todo_r4);\n    });\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function TodoComponent_li_10_Template_button_click_7_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const todo_r4 = restoredCtx.$implicit;\n      const i_r5 = restoredCtx.index;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.deleteTodo(todo_r4.id, i_r5);\n    });\n    i0.ɵɵtext(8, \"Delete\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const todo_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"completed\", todo_r4.completed);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(todo_r4.title);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(todo_r4.completed ? \"Undo\" : \"Complete\");\n  }\n}\n\nexport let TodoComponent = /*#__PURE__*/(() => {\n  class TodoComponent {\n    constructor(http) {\n      this.http = http;\n      this.todos = [];\n      this.newTodo = {\n        id: 0,\n        title: '',\n        description: '',\n        completed: false\n      };\n      this.editMode = false;\n      this.editIndex = -1;\n      this.sortField = 'ID';\n      this.sortOrder = 'asc';\n      this.nextPage = 1;\n      this.showNext = false;\n      this.showPrev = false;\n    }\n\n    ngOnInit() {\n      this.loadTodos();\n    }\n\n    loadTodos() {\n      this.http.get(`api/todos/${this.sortField}/${this.sortOrder}/${this.nextPage}`).subscribe(data => {\n        this.todos = data;\n        this.showNext = this.todos.length > 9;\n        this.showPrev = this.nextPage > 1;\n      }, error => {\n        alert('Failed to load todos. Check console for details.');\n        console.error(error);\n      });\n    }\n\n    saveTodo() {\n      if (!this.newTodo.title) {\n        alert('Title is required!');\n        return;\n      }\n\n      if (this.editMode) {\n        this.updateTodo();\n      } else {\n        this.createTodo();\n      }\n    }\n\n    createTodo() {\n      this.http.post('api/todos', this.newTodo).subscribe(data => {\n        this.todos.push(data);\n        this.resetForm();\n      }, error => {\n        alert('Failed to create todo. Check console for details.');\n        console.error(error);\n      });\n    }\n\n    updateTodo() {\n      this.http.put(`api/todos/${this.newTodo.id}`, this.newTodo).subscribe(data => {\n        if (this.editIndex > -1) {\n          this.todos[this.editIndex] = data;\n        }\n\n        this.resetForm();\n      }, error => {\n        alert('Failed to update todo. Check console for details.');\n        console.error(error);\n      });\n    }\n\n    deleteTodo(id, index) {\n      if (confirm('Are you sure you want to delete this todo?')) {\n        this.http.delete(`api/todos/${id}`).subscribe(() => {\n          this.todos.splice(index, 1);\n        }, error => {\n          alert('Failed to delete todo. Check console for details.');\n          console.error(error);\n        });\n      }\n    }\n\n    toggleStatus(todo) {\n      const originalStatus = todo.completed;\n      todo.completed = !todo.completed;\n      this.http.put(`api/todos/${todo.id}/toggle`, {}).subscribe(data => {\n        Object.assign(todo, data);\n      }, error => {\n        alert('Failed to update todo status. Check console for details.');\n        console.error(error);\n        todo.completed = originalStatus;\n      });\n    }\n\n    editTodo(todo, index) {\n      this.newTodo = Object.assign({}, todo);\n      this.editMode = true;\n      this.editIndex = index;\n    }\n\n    cancelEdit() {\n      this.resetForm();\n    }\n\n    resetForm() {\n      this.newTodo = {\n        id: 0,\n        title: '',\n        description: '',\n        completed: false\n      };\n      this.editMode = false;\n      this.editIndex = -1;\n    }\n\n    toggleNextPage() {\n      this.nextPage++;\n      this.loadTodos();\n      this.resetForm();\n    }\n\n    togglePrevPage() {\n      if (this.nextPage > 1) {\n        this.nextPage--;\n        this.loadTodos();\n        this.resetForm();\n      }\n    }\n\n    toggleSortField(newField) {\n      if (this.sortField === newField) {\n        this.toggleSortOrder();\n      } else {\n        this.sortOrder = 'asc';\n      }\n\n      this.sortField = newField;\n      this.loadTodos();\n      this.resetForm();\n    }\n\n    toggleSortOrder() {\n      this.sortOrder = this.sortOrder === 'asc' ? 'desc' : 'asc';\n    }\n\n  }\n\n  TodoComponent.ɵfac = function TodoComponent_Factory(t) {\n    return new (t || TodoComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n\n  TodoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TodoComponent,\n    selectors: [[\"app-todo\"]],\n    decls: 11,\n    vars: 5,\n    consts: [[3, \"ngSubmit\"], [\"type\", \"text\", \"name\", \"title\", \"placeholder\", \"Title\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"description\", \"placeholder\", \"Description\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"], [\"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 3, \"click\"], [3, \"click\"]],\n    template: function TodoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelementStart(1, \"h2\");\n        i0.ɵɵtext(2, \"Todo List\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function TodoComponent_Template_form_ngSubmit_3_listener() {\n          return ctx.saveTodo();\n        });\n        i0.ɵɵelementStart(4, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function TodoComponent_Template_input_ngModelChange_4_listener($event) {\n          return ctx.newTodo.title = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"textarea\", 2);\n        i0.ɵɵlistener(\"ngModelChange\", function TodoComponent_Template_textarea_ngModelChange_5_listener($event) {\n          return ctx.newTodo.description = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 3);\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, TodoComponent_button_8_Template, 2, 0, \"button\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"ul\");\n        i0.ɵɵtemplate(10, TodoComponent_li_10_Template, 9, 4, \"li\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.newTodo.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.newTodo.description);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.editMode ? \"Update\" : \"Add\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.editMode);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.todos);\n      }\n    },\n    directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.NgForm, i2.DefaultValueAccessor, i2.RequiredValidator, i2.NgControlStatus, i2.NgModel, i3.NgIf, i3.NgForOf],\n    styles: [\".completed[_ngcontent-%COMP%]{text-decoration:line-through;color:gray}\"]\n  });\n  return TodoComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}