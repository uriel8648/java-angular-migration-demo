{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { finalize } from 'rxjs/operators';\n/**\r\n * AppComponent - Main component that replaces the AngularJS TodoController\r\n *\r\n * Migration notes:\r\n * - Converted $scope properties to component class properties\r\n * - Replaced $http calls with TodoService that uses HttpClient\r\n * - Implemented OnInit lifecycle hook instead of controller initialization\r\n * - Converted ng-model to [(ngModel)] for two-way binding\r\n * - Moved sorting and pagination logic to component methods\r\n * - Added proper TypeScript types to all variables\r\n * - Added loading state for better UX\r\n * - Improved error handling with RxJS operators\r\n */\n\nlet AppComponent = class AppComponent {\n  /**\r\n   * Constructor with dependency injection\r\n   * Replaces AngularJS $http with TodoService\r\n   */\n  constructor(todoService) {\n    this.todoService = todoService; // Properties that were on $scope in AngularJS\n\n    this.todos = [];\n    this.newTodo = this.resetTodoForm();\n    this.editMode = false;\n    this.editIndex = -1; // Pagination properties\n\n    this.currentPage = 0;\n    this.pageSize = 10;\n    this.showNext = false;\n    this.showPrev = false;\n    this.allTodos = []; // store all todos fetched from backend\n\n    this.pagedTodos = []; // todos to display on current page\n    // Sorting properties\n\n    this.sortField = 'ID';\n    this.sortAscending = true; // UI state properties\n\n    this.loading = false;\n    this.errorMessage = '';\n  }\n  /**\r\n   * Lifecycle hook that replaces the controller initialization\r\n   */\n\n\n  ngOnInit() {\n    this.loadTodos();\n  }\n\n  loadTodos() {\n    this.loading = true;\n    this.errorMessage = '';\n    this.todoService.getTodos(this.sortField.toLowerCase(), this.sortAscending ? 'asc' : 'desc', this.currentPage + 1).pipe(finalize(() => this.loading = false)).subscribe({\n      next: data => {\n        this.allTodos = data; // Client-side sorting fallback\n\n        this.allTodos.sort((a, b) => {\n          let fieldA = a[this.sortField.toLowerCase()];\n          let fieldB = b[this.sortField.toLowerCase()];\n          if (fieldA == null) fieldA = '';\n          if (fieldB == null) fieldB = '';\n\n          if (typeof fieldA === 'string') {\n            fieldA = fieldA.toLowerCase();\n            fieldB = fieldB.toLowerCase();\n          }\n\n          if (fieldA < fieldB) return this.sortAscending ? -1 : 1;\n          if (fieldA > fieldB) return this.sortAscending ? 1 : -1;\n          return 0;\n        }); // Slice data to pageSize items for pagination\n\n        this.updatePagedTodos(); // Update pagination controls based on data length and currentPage\n\n        this.showPrev = this.currentPage > 0;\n        this.showNext = (this.currentPage + 1) * this.pageSize < this.allTodos.length;\n        console.log('loadTodos: pagedTodos.length=', this.pagedTodos.length, 'currentPage=', this.currentPage);\n      },\n      error: error => {\n        console.error('Error loading todos:', error);\n        this.errorMessage = 'Failed to load todos. Please try again later.';\n      }\n    });\n  }\n\n  updatePagedTodos() {\n    const startIndex = this.currentPage * this.pageSize;\n    this.pagedTodos = this.allTodos.slice(startIndex, startIndex + this.pageSize);\n    this.showPrev = this.currentPage > 0;\n    this.showNext = startIndex + this.pageSize < this.allTodos.length;\n  }\n\n  toggleNextPage() {\n    if (this.showNext) {\n      this.currentPage++;\n      this.updatePagedTodos();\n      console.log('Next page clicked, currentPage:', this.currentPage);\n    }\n  }\n\n  togglePrevPage() {\n    if (this.showPrev) {\n      this.currentPage--;\n      this.updatePagedTodos();\n      console.log('Previous page clicked, currentPage:', this.currentPage);\n    }\n  }\n  /**\r\n   * Toggles the sort field and direction\r\n   */\n\n\n  toggleSortField(field) {\n    if (this.sortField === field) {\n      this.sortAscending = !this.sortAscending;\n    } else {\n      this.sortField = field;\n      this.sortAscending = true;\n    }\n\n    this.loadTodos();\n  }\n  /**\r\n   * Saves a new todo or updates an existing one\r\n   */\n\n\n  saveTodo() {\n    if (!this.newTodo.title.trim()) {\n      this.errorMessage = 'Title is required';\n      return;\n    }\n\n    this.loading = true;\n    this.errorMessage = '';\n\n    if (this.editMode) {\n      this.todoService.updateTodo(this.newTodo).pipe(finalize(() => this.loading = false)).subscribe({\n        next: updatedTodo => {\n          this.pagedTodos[this.editIndex] = updatedTodo;\n          this.resetForm();\n        },\n        error: error => {\n          console.error('Error updating todo:', error);\n          this.errorMessage = 'Failed to update todo. Please try again.';\n        }\n      });\n    } else {\n      this.todoService.createTodo(this.newTodo).pipe(finalize(() => this.loading = false)).subscribe({\n        next: createdTodo => {\n          // Only add to the current view if we're on the first page or if appropriate for the current sort\n          if (this.currentPage === 0) {\n            this.todos.unshift(createdTodo);\n          }\n\n          this.resetForm(); // Reload to ensure proper sorting and pagination\n\n          this.loadTodos();\n        },\n        error: error => {\n          console.error('Error creating todo:', error);\n          this.errorMessage = 'Failed to create todo. Please try again.';\n        }\n      });\n    }\n  }\n  /**\r\n   * Prepares the form for editing an existing todo\r\n   */\n\n\n  editTodo(todo, index) {\n    this.editMode = true;\n    this.editIndex = index; // Create a copy to avoid modifying the original until save\n\n    this.newTodo = Object.assign({}, todo);\n  }\n  /**\r\n   * Cancels the edit operation\r\n   */\n\n\n  cancelEdit() {\n    this.resetForm();\n  }\n  /**\r\n   * Toggles the completion status of a todo\r\n   */\n\n\n  toggleStatus(todo) {\n    this.loading = true;\n    this.errorMessage = '';\n    const updatedTodo = Object.assign(Object.assign({}, todo), {\n      completed: !todo.completed,\n      completedDate: !todo.completed ? new Date() : null\n    });\n    this.todoService.updateTodo(updatedTodo).pipe(finalize(() => this.loading = false)).subscribe({\n      next: result => {\n        // Find and update the todo in our local array\n        const index = this.pagedTodos.findIndex(t => t.id === result.id);\n\n        if (index !== -1) {\n          this.pagedTodos[index] = result;\n        }\n      },\n      error: error => {\n        console.error('Error toggling todo status:', error);\n        this.errorMessage = 'Failed to update todo status. Please try again.';\n      }\n    });\n  }\n  /**\r\n   * Deletes a todo\r\n   */\n\n\n  deleteTodo(id, index) {\n    if (id === undefined) {\n      console.warn('deleteTodo called with undefined id');\n      return;\n    }\n\n    if (confirm('Are you sure you want to delete this todo?')) {\n      this.loading = true;\n      this.errorMessage = '';\n      this.todoService.deleteTodo(id).pipe(finalize(() => this.loading = false)).subscribe({\n        next: () => {\n          this.pagedTodos.splice(index, 1);\n        },\n        error: error => {\n          console.error('Error deleting todo:', error);\n          this.errorMessage = 'Failed to delete todo. Please try again.';\n        }\n      });\n    }\n  }\n  /**\r\n   * Resets the form to default values\r\n   */\n\n\n  resetForm() {\n    this.newTodo = this.resetTodoForm();\n    this.editMode = false;\n    this.editIndex = -1;\n    this.errorMessage = '';\n  }\n  /**\r\n   * Creates an empty todo object\r\n   */\n\n\n  resetTodoForm() {\n    return {\n      id: undefined,\n      title: '',\n      description: '',\n      completed: false,\n      createdDate: null,\n      completedDate: null\n    };\n  }\n\n  get nextPage() {\n    return this.currentPage + 1;\n  }\n\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})], AppComponent);\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module"}