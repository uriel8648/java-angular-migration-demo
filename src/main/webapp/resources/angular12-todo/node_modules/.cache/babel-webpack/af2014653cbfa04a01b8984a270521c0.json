{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bound');\n\nvar inspect = require('object-inspect');\n\nvar $TypeError = require('es-errors/type');\n\nvar $Map = GetIntrinsic('%Map%', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => V} */\n\nvar $mapGet = callBound('Map.prototype.get', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K, value: V) => void} */\n\nvar $mapSet = callBound('Map.prototype.set', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\n\nvar $mapHas = callBound('Map.prototype.has', true);\n/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */\n\nvar $mapDelete = callBound('Map.prototype.delete', true);\n/** @type {<K, V>(thisArg: Map<K, V>) => number} */\n\nvar $mapSize = callBound('Map.prototype.size', true);\n/** @type {import('.')} */\n\nmodule.exports = !!$Map &&\n/** @type {Exclude<import('.'), false>} */\nfunction getSideChannelMap() {\n  /** @typedef {ReturnType<typeof getSideChannelMap>} Channel */\n\n  /** @typedef {Parameters<Channel['get']>[0]} K */\n\n  /** @typedef {Parameters<Channel['set']>[1]} V */\n\n  /** @type {Map<K, V> | undefined} */\n  var $m;\n  /** @type {Channel} */\n\n  var channel = {\n    assert: function (key) {\n      if (!channel.has(key)) {\n        throw new $TypeError('Side channel does not contain ' + inspect(key));\n      }\n    },\n    'delete': function (key) {\n      if ($m) {\n        var result = $mapDelete($m, key);\n\n        if ($mapSize($m) === 0) {\n          $m = void undefined;\n        }\n\n        return result;\n      }\n\n      return false;\n    },\n    get: function (key) {\n      // eslint-disable-line consistent-return\n      if ($m) {\n        return $mapGet($m, key);\n      }\n    },\n    has: function (key) {\n      if ($m) {\n        return $mapHas($m, key);\n      }\n\n      return false;\n    },\n    set: function (key, value) {\n      if (!$m) {\n        // @ts-expect-error TS can't handle narrowing a variable inside a closure\n        $m = new $Map();\n      }\n\n      $mapSet($m, key, value);\n    }\n  }; // @ts-expect-error TODO: figure out why TS is erroring here\n\n  return channel;\n};","map":null,"metadata":{},"sourceType":"script"}