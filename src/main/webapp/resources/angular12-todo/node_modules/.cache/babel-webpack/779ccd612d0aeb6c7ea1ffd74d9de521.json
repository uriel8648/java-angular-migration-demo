{"ast":null,"code":"import { finalize } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/todo.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\n\nfunction TodoListComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtext(1, \" No todo items found. Create a new one! \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TodoListComponent_table_11_tr_18_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 34);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"date\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const todo_r4 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Completed: \", i0.ɵɵpipeBind2(2, 1, todo_r4.completedDate, \"medium\"), \"\");\n  }\n}\n\nconst _c0 = function (a0, a1) {\n  return {\n    \"completed-card\": a0,\n    \"pending-card\": a1\n  };\n};\n\nconst _c1 = function (a0, a1) {\n  return {\n    \"btn-warning\": a0,\n    \"btn-success\": a1\n  };\n};\n\nconst _c2 = function (a0, a1) {\n  return {\n    \"fa-check\": a0,\n    \"fa-undo\": a1\n  };\n};\n\nfunction TodoListComponent_table_11_tr_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 20);\n    i0.ɵɵelementStart(6, \"p\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"div\", 21);\n    i0.ɵɵelementStart(9, \"span\", 22);\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"div\");\n    i0.ɵɵtemplate(13, TodoListComponent_table_11_tr_18_span_13_Template, 3, 4, \"span\", 23);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"td\");\n    i0.ɵɵelementStart(15, \"span\", 24);\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"td\", 25);\n    i0.ɵɵelementStart(18, \"button\", 26);\n    i0.ɵɵlistener(\"click\", function TodoListComponent_table_11_tr_18_Template_button_click_18_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const todo_r4 = restoredCtx.$implicit;\n      const i_r5 = restoredCtx.index;\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.showDetails(todo_r4, i_r5);\n    });\n    i0.ɵɵelement(19, \"i\", 27);\n    i0.ɵɵtext(20, \"Details \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function TodoListComponent_table_11_tr_18_Template_button_click_21_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const todo_r4 = restoredCtx.$implicit;\n      const i_r5 = restoredCtx.index;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.editTodo(todo_r4, i_r5);\n    });\n    i0.ɵɵelement(22, \"i\", 29);\n    i0.ɵɵtext(23, \"Edit \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(24, \"button\", 30);\n    i0.ɵɵlistener(\"click\", function TodoListComponent_table_11_tr_18_Template_button_click_24_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const todo_r4 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.toggleStatus(todo_r4);\n    });\n    i0.ɵɵelement(25, \"i\", 31);\n    i0.ɵɵtext(26);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"button\", 32);\n    i0.ɵɵlistener(\"click\", function TodoListComponent_table_11_tr_18_Template_button_click_27_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const todo_r4 = restoredCtx.$implicit;\n      const i_r5 = restoredCtx.index;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.deleteTodo(todo_r4.id, i_r5);\n    });\n    i0.ɵɵelement(28, \"i\", 33);\n    i0.ɵɵtext(29, \" Delete \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const todo_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(todo_r4.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"completed\", todo_r4.completed);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(todo_r4.title);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(todo_r4.description);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Created: \", i0.ɵɵpipeBind2(11, 12, todo_r4.createdDate, \"medium\"), \"\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", todo_r4.completed && todo_r4.completedDate);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(15, _c0, todo_r4.completed, !todo_r4.completed));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", todo_r4.completed ? \"Completed\" : \"Pending\", \" \");\n    i0.ɵɵadvance(8);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(18, _c1, todo_r4.completed, !todo_r4.completed));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(21, _c2, !todo_r4.completed, todo_r4.completed));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", todo_r4.completed ? \"Incomplete\" : \"Complete\", \" \");\n  }\n}\n\nfunction TodoListComponent_table_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"table\", 16);\n    i0.ɵɵelementStart(1, \"thead\");\n    i0.ɵɵelementStart(2, \"tr\");\n    i0.ɵɵelementStart(3, \"th\");\n    i0.ɵɵtext(4, \"ID \");\n    i0.ɵɵelementStart(5, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function TodoListComponent_table_11_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.toggleSortField(\"ID\");\n    });\n    i0.ɵɵelement(6, \"i\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\");\n    i0.ɵɵtext(8, \"Title \");\n    i0.ɵɵelementStart(9, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function TodoListComponent_table_11_Template_button_click_9_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.toggleSortField(\"TITLE\");\n    });\n    i0.ɵɵelement(10, \"i\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"th\");\n    i0.ɵɵtext(12, \"Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"th\");\n    i0.ɵɵtext(14, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"th\");\n    i0.ɵɵtext(16, \"Actions\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"tbody\");\n    i0.ɵɵtemplate(18, TodoListComponent_table_11_tr_18_Template, 30, 24, \"tr\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(18);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.pagedTodos);\n  }\n}\n\nfunction TodoListComponent_button_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function TodoListComponent_button_13_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.togglePrevPage();\n    });\n    i0.ɵɵelement(1, \"i\", 35);\n    i0.ɵɵtext(2, \" Previous \");\n    i0.ɵɵelementEnd();\n  }\n}\n/**\r\n * AppComponent - Main component that replaces the AngularJS TodoController\r\n *\r\n * Migration notes:\r\n * - Converted $scope properties to component class properties\r\n * - Replaced $http calls with TodoService that uses HttpClient\r\n * - Implemented OnInit lifecycle hook instead of controller initialization\r\n * - Converted ng-model to [(ngModel)] for two-way binding\r\n * - Moved sorting and pagination logic to component methods\r\n * - Added proper TypeScript types to all variables\r\n * - Added loading state for better UX\r\n * - Improved error handling with RxJS operators\r\n */\n\n\nexport let TodoListComponent = /*#__PURE__*/(() => {\n  class TodoListComponent {\n    /**\r\n     * Constructor with dependency injection\r\n     * Replaces AngularJS $http with TodoService\r\n     */\n    constructor(todoService, router) {\n      this.todoService = todoService;\n      this.router = router; // Constant for page size\n\n      this.PAGE_SIZE = 10; // Collection of todos\n\n      this.todos = [];\n      this.newTodo = this.resetTodoForm();\n      this.editMode = false;\n      this.editIndex = -1; // Pagination properties\n\n      this.currentPage = 0;\n      this.pageSize = 10;\n      this.showNext = false;\n      this.showPrev = false;\n      this.allTodos = []; // store all todos fetched from backend\n\n      this.pagedTodos = []; // todos to display on current page\n      // Sorting properties\n\n      this.sortField = 'ID';\n      this.sortAscending = true; // UI state properties\n\n      this.loading = false;\n      this.errorMessage = '';\n    }\n    /**\r\n     * Lifecycle hook that replaces the controller initialization\r\n     */\n\n\n    ngOnInit() {\n      this.loadTodos();\n    }\n\n    loadTodos() {\n      this.loading = true;\n      this.errorMessage = '';\n      this.todoService.getTodos(this.sortField.toLowerCase(), this.sortAscending ? 'asc' : 'desc', this.currentPage + 1).pipe(finalize(() => this.loading = false)).subscribe({\n        next: data => {\n          this.allTodos = data; // Client-side sorting fallback\n\n          this.allTodos.sort((a, b) => {\n            let fieldA = a[this.sortField.toLowerCase()];\n            let fieldB = b[this.sortField.toLowerCase()];\n            if (fieldA == null) fieldA = '';\n            if (fieldB == null) fieldB = '';\n\n            if (typeof fieldA === 'string') {\n              fieldA = fieldA.toLowerCase();\n              fieldB = fieldB.toLowerCase();\n            }\n\n            if (fieldA < fieldB) return this.sortAscending ? -1 : 1;\n            if (fieldA > fieldB) return this.sortAscending ? 1 : -1;\n            return 0;\n          }); // Slice data to pageSize items for pagination\n\n          this.updatePagedTodos(); // Update pagination controls based on data length and currentPage\n\n          this.showPrev = this.currentPage > 0;\n          this.showNext = (this.currentPage + 1) * this.pageSize < this.allTodos.length;\n          console.log('loadTodos: pagedTodos.length=', this.pagedTodos.length, 'currentPage=', this.currentPage);\n        },\n        error: error => {\n          console.error('Error loading todos:', error);\n          this.errorMessage = 'Failed to load todos. Please try again later.';\n        }\n      });\n    }\n\n    updatePagedTodos() {\n      const startIndex = this.currentPage * this.pageSize;\n      this.pagedTodos = this.allTodos.slice(startIndex, startIndex + this.pageSize);\n      this.showPrev = this.currentPage > 0;\n      this.showNext = startIndex + this.pageSize < this.allTodos.length;\n    }\n\n    toggleNextPage() {\n      if (this.showNext) {\n        this.currentPage++;\n        this.updatePagedTodos();\n        console.log('Next page clicked, currentPage:', this.currentPage);\n      }\n    }\n\n    togglePrevPage() {\n      if (this.showPrev) {\n        this.currentPage--;\n        this.updatePagedTodos();\n        console.log('Previous page clicked, currentPage:', this.currentPage);\n      }\n    }\n    /**\r\n     * Toggles the sort field and direction\r\n     */\n\n\n    toggleSortField(field) {\n      if (this.sortField === field) {\n        this.sortAscending = !this.sortAscending;\n      } else {\n        this.sortField = field;\n        this.sortAscending = true;\n      }\n\n      this.loadTodos();\n    }\n    /**\r\n     * Saves a new todo or updates an existing one\r\n     */\n\n\n    saveTodo() {\n      if (!this.newTodo.title.trim()) {\n        this.errorMessage = 'Title is required';\n        return;\n      }\n\n      this.loading = true;\n      this.errorMessage = '';\n\n      if (this.editMode) {\n        this.todoService.updateTodo(this.newTodo).pipe(finalize(() => this.loading = false)).subscribe({\n          next: updatedTodo => {\n            this.pagedTodos[this.editIndex] = updatedTodo;\n            this.resetForm();\n          },\n          error: error => {\n            console.error('Error updating todo:', error);\n            this.errorMessage = 'Failed to update todo. Please try again.';\n          }\n        });\n      } else {\n        this.todoService.createTodo(this.newTodo).pipe(finalize(() => this.loading = false)).subscribe({\n          next: createdTodo => {\n            // Only add to the current view if we're on the first page or if appropriate for the current sort\n            if (this.currentPage === 0) {\n              this.todos.unshift(createdTodo);\n            }\n\n            this.resetForm(); // Reload to ensure proper sorting and pagination\n\n            this.loadTodos();\n          },\n          error: error => {\n            console.error('Error creating todo:', error);\n            this.errorMessage = 'Failed to create todo. Please try again.';\n          }\n        });\n      }\n    }\n    /**\r\n     * Prepares the form for editing an existing todo\r\n     */\n\n\n    editTodo(todo, index) {\n      console.log(todo); //this.editMode = true;\n      //this.editIndex = index;\n      // Create a copy to avoid modifying the original until save\n      //this.newTodo = { ...todo };\n\n      this.todoService.setTodo(todo);\n      this.router.navigate(['/todos', index + 1, 'edit']);\n    }\n    /**\r\n     * Cancels the edit operation\r\n     */\n\n\n    cancelEdit() {\n      this.resetForm();\n    }\n    /**\r\n     * Toggles the completion status of a todo\r\n     */\n\n\n    toggleStatus(todo) {\n      this.loading = true;\n      this.errorMessage = '';\n      const updatedTodo = Object.assign(Object.assign({}, todo), {\n        completed: !todo.completed,\n        completedDate: !todo.completed ? new Date() : null\n      });\n      this.todoService.updateTodo(updatedTodo).pipe(finalize(() => this.loading = false)).subscribe({\n        next: result => {\n          // Find and update the todo in our local array\n          const index = this.pagedTodos.findIndex(t => t.id === result.id);\n\n          if (index !== -1) {\n            this.pagedTodos[index] = result;\n          }\n        },\n        error: error => {\n          console.error('Error toggling todo status:', error);\n          this.errorMessage = 'Failed to update todo status. Please try again.';\n        }\n      });\n    }\n    /**\r\n     * Deletes a todo\r\n     */\n\n\n    deleteTodo(id, index) {\n      if (id === undefined) {\n        console.warn('deleteTodo called with undefined id');\n        return;\n      }\n\n      if (confirm('Are you sure you want to delete this todo?')) {\n        this.loading = true;\n        this.errorMessage = '';\n        this.todoService.deleteTodo(id).pipe(finalize(() => this.loading = false)).subscribe({\n          next: () => {\n            this.pagedTodos.splice(index, 1);\n          },\n          error: error => {\n            console.error('Error deleting todo:', error);\n            this.errorMessage = 'Failed to delete todo. Please try again.';\n          }\n        });\n      }\n    }\n    /**\r\n     * Resets the form to default values\r\n     */\n\n\n    resetForm() {\n      this.newTodo = this.resetTodoForm();\n      this.editMode = false;\n      this.editIndex = -1;\n      this.errorMessage = '';\n    }\n    /**\r\n     * Creates an empty todo object\r\n     */\n\n\n    resetTodoForm() {\n      return {\n        id: undefined,\n        title: '',\n        description: '',\n        completed: false,\n        createdDate: null,\n        completedDate: null\n      };\n    }\n\n    get nextPage() {\n      return this.currentPage + 1;\n    }\n    /**\r\n     * Show details of a todo by navigating to the details route\r\n     */\n\n\n    showDetails(todo, index) {\n      this.todoService.setTodo(todo);\n      this.router.navigate(['/todos', todo.id]);\n    }\n\n  }\n\n  TodoListComponent.ɵfac = function TodoListComponent_Factory(t) {\n    return new (t || TodoListComponent)(i0.ɵɵdirectiveInject(i1.TodoService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n\n  TodoListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TodoListComponent,\n    selectors: [[\"app-todo-list\"]],\n    decls: 19,\n    vars: 4,\n    consts: [[1, \"row\"], [1, \"col-md-11\", \"mx-auto\"], [1, \"panel\", \"panel-primary\"], [1, \"create-div\"], [\"type\", \"button\", \"routerLink\", \"/todos/new\", 1, \"btn\", \"btn-success\", \"btn-xs\"], [1, \"fa\", \"fa-plus\"], [1, \"panel-body\"], [1, \"col-md-12\"], [\"class\", \"alert alert-info\", 4, \"ngIf\"], [\"class\", \"table table-striped table-hover\", 4, \"ngIf\"], [1, \"pagination-controls\"], [\"type\", \"button\", \"class\", \"btn btn-xs btn-danger\", 3, \"click\", 4, \"ngIf\"], [1, \"page-indicator\"], [\"type\", \"button\", 1, \"btn\", \"btn-xs\", \"btn-danger\", 3, \"click\"], [1, \"fa\", \"fa-forward\"], [1, \"alert\", \"alert-info\"], [1, \"table\", \"table-striped\", \"table-hover\"], [\"type\", \"button\", 1, \"btn\", \"btn-sm\", \"btn-danger\", 3, \"click\"], [1, \"fa\", \"fa-sort\"], [4, \"ngFor\", \"ngForOf\"], [1, \"todo-details\"], [1, \"todo-meta\"], [1, \"created-date\"], [\"class\", \"completed-date\", 4, \"ngIf\"], [1, \"status-badge\", 3, \"ngClass\"], [1, \"task-actions\"], [\"type\", \"button\", 1, \"btn\", \"btn-xs\", \"btn-info\", \"m-1\", 3, \"click\"], [1, \"fa\", \"fa-info-circle\"], [\"type\", \"button\", 1, \"btn\", \"btn-xs\", \"btn-primary\", \"m-1\", 3, \"click\"], [1, \"fa\", \"fa-edit\"], [\"type\", \"button\", 1, \"btn\", \"btn-xs\", \"m-1\", 3, \"ngClass\", \"click\"], [1, \"fa\", 3, \"ngClass\"], [\"type\", \"button\", 1, \"btn\", \"btn-xs\", \"btn-danger\", \"m-1\", 3, \"click\"], [1, \"fa\", \"fa-trash\"], [1, \"completed-date\"], [1, \"fa\", \"fa-backward\"]],\n    template: function TodoListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"button\", 4);\n        i0.ɵɵelement(5, \"i\", 5);\n        i0.ɵɵtext(6, \" Create New Todo \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 6);\n        i0.ɵɵelementStart(8, \"div\", 0);\n        i0.ɵɵelementStart(9, \"div\", 7);\n        i0.ɵɵtemplate(10, TodoListComponent_div_10_Template, 2, 0, \"div\", 8);\n        i0.ɵɵtemplate(11, TodoListComponent_table_11_Template, 19, 1, \"table\", 9);\n        i0.ɵɵelementStart(12, \"div\", 10);\n        i0.ɵɵtemplate(13, TodoListComponent_button_13_Template, 3, 0, \"button\", 11);\n        i0.ɵɵelementStart(14, \"span\", 12);\n        i0.ɵɵtext(15);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function TodoListComponent_Template_button_click_16_listener() {\n          return ctx.toggleNextPage();\n        });\n        i0.ɵɵelement(17, \"i\", 14);\n        i0.ɵɵtext(18, \" Next \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngIf\", ctx.pagedTodos.length === 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.pagedTodos.length > 0);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.showPrev);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Page \", ctx.nextPage, \"\");\n      }\n    },\n    directives: [i2.RouterLink, i3.NgIf, i3.NgForOf, i3.NgClass],\n    pipes: [i3.DatePipe],\n    styles: [\"[_nghost-%COMP%]{display:block;margin:20px 0}.todo-list-container[_ngcontent-%COMP%]{margin-bottom:20px}.todo-table[_ngcontent-%COMP%]{width:100%;border-collapse:collapse;margin-bottom:20px}.todo-table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%], .todo-table[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{padding:10px;text-align:left;border-bottom:1px solid #ddd}.todo-table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{background-color:#f2f2f2;cursor:pointer}.todo-table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:hover{background-color:#e6e6e6}.todo-table[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]   .sort-icon[_ngcontent-%COMP%]{margin-left:5px}.todo-table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:hover{background-color:#f5f5f5}.todo-table[_ngcontent-%COMP%]   .completed[_ngcontent-%COMP%]{text-decoration:line-through;color:#888}.action-buttons[_ngcontent-%COMP%]{display:flex;grid-gap:5px;gap:5px}.action-buttons[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{padding:5px 10px;border:none;border-radius:4px;cursor:pointer}.action-buttons[_ngcontent-%COMP%]   button.edit-btn[_ngcontent-%COMP%]{background-color:#4caf50;color:#fff}.action-buttons[_ngcontent-%COMP%]   button.edit-btn[_ngcontent-%COMP%]:hover{background-color:#45a049}.action-buttons[_ngcontent-%COMP%]   button.delete-btn[_ngcontent-%COMP%]{background-color:#f44336;color:#fff}.action-buttons[_ngcontent-%COMP%]   button.delete-btn[_ngcontent-%COMP%]:hover{background-color:#d32f2f}.pagination-controls[_ngcontent-%COMP%]{display:flex;justify-content:center;margin-top:20px}.pagination-controls[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{padding:8px 16px;margin:0 10px;background-color:#4caf50;color:#fff;border:none;border-radius:4px;cursor:pointer}.pagination-controls[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{background-color:#45a049}.pagination-controls[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:disabled{background-color:#ccc;cursor:not-allowed}.status-toggle[_ngcontent-%COMP%]{cursor:pointer}.status-toggle[_ngcontent-%COMP%]   input[type=checkbox][_ngcontent-%COMP%]{margin-right:5px}.create-div[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{background-color:#45a049;margin:2% 1%}.status-badge[_ngcontent-%COMP%]{display:inline-block;padding:4px 8px;border-radius:4px;font-size:12px;font-weight:bold;margin-left:1%}.status-badge.completed-card[_ngcontent-%COMP%]{background-color:#d4edda;color:#155724}.status-badge.pending-card[_ngcontent-%COMP%]{background-color:#fff3cd;color:#f0ad4e}.btn-info[_ngcontent-%COMP%]{color:#fff}\"]\n  });\n  return TodoListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}