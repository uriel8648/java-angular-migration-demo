{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBound = require('call-bound');\n\nvar inspect = require('object-inspect');\n\nvar getSideChannelMap = require('side-channel-map');\n\nvar $TypeError = require('es-errors/type');\n\nvar $WeakMap = GetIntrinsic('%WeakMap%', true);\n/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => V} */\n\nvar $weakMapGet = callBound('WeakMap.prototype.get', true);\n/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K, value: V) => void} */\n\nvar $weakMapSet = callBound('WeakMap.prototype.set', true);\n/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => boolean} */\n\nvar $weakMapHas = callBound('WeakMap.prototype.has', true);\n/** @type {<K extends object, V>(thisArg: WeakMap<K, V>, key: K) => boolean} */\n\nvar $weakMapDelete = callBound('WeakMap.prototype.delete', true);\n/** @type {import('.')} */\n\nmodule.exports = $WeakMap ?\n/** @type {Exclude<import('.'), false>} */\nfunction getSideChannelWeakMap() {\n  /** @typedef {ReturnType<typeof getSideChannelWeakMap>} Channel */\n\n  /** @typedef {Parameters<Channel['get']>[0]} K */\n\n  /** @typedef {Parameters<Channel['set']>[1]} V */\n\n  /** @type {WeakMap<K & object, V> | undefined} */\n  var $wm;\n  /** @type {Channel | undefined} */\n\n  var $m;\n  /** @type {Channel} */\n\n  var channel = {\n    assert: function (key) {\n      if (!channel.has(key)) {\n        throw new $TypeError('Side channel does not contain ' + inspect(key));\n      }\n    },\n    'delete': function (key) {\n      if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n        if ($wm) {\n          return $weakMapDelete($wm, key);\n        }\n      } else if (getSideChannelMap) {\n        if ($m) {\n          return $m['delete'](key);\n        }\n      }\n\n      return false;\n    },\n    get: function (key) {\n      if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n        if ($wm) {\n          return $weakMapGet($wm, key);\n        }\n      }\n\n      return $m && $m.get(key);\n    },\n    has: function (key) {\n      if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n        if ($wm) {\n          return $weakMapHas($wm, key);\n        }\n      }\n\n      return !!$m && $m.has(key);\n    },\n    set: function (key, value) {\n      if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) {\n        if (!$wm) {\n          $wm = new $WeakMap();\n        }\n\n        $weakMapSet($wm, key, value);\n      } else if (getSideChannelMap) {\n        if (!$m) {\n          $m = getSideChannelMap();\n        } // eslint-disable-next-line no-extra-parens\n\n        /** @type {NonNullable<typeof $m>} */\n\n\n        $m.set(key, value);\n      }\n    }\n  }; // @ts-expect-error TODO: figure out why this is erroring\n\n  return channel;\n} : getSideChannelMap;","map":null,"metadata":{},"sourceType":"script"}